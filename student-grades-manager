
---

# Repo 2: `grades-manager-c`

## `grades_manager.c`
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME 50
#define MAX_GRADES 50

typedef struct {
    char name[MAX_NAME];
    int grades[MAX_GRADES];
    int count;
} Student;

typedef struct {
    Student *arr;
    int size;
    int capacity;
} StudentList;

void initList(StudentList *list) {
    list->size = 0;
    list->capacity = 4;
    list->arr = (Student*)malloc(sizeof(Student) * list->capacity);
}

void ensureCapacity(StudentList *list) {
    if (list->size >= list->capacity) {
        list->capacity *= 2;
        Student *tmp = (Student*)realloc(list->arr, sizeof(Student) * list->capacity);
        if (!tmp) {
            printf("Memory allocation failed.\n");
            exit(1);
        }
        list->arr = tmp;
    }
}

void addStudent(StudentList *list, const char *name) {
    ensureCapacity(list);
    strncpy(list->arr[list->size].name, name, MAX_NAME - 1);
    list->arr[list->size].name[MAX_NAME-1] = '\0';
    list->arr[list->size].count = 0;
    list->size++;
}

int findStudentIndex(StudentList *list, const char *name) {
    for (int i = 0; i < list->size; i++) {
        if (strcmp(list->arr[i].name, name) == 0) return i;
    }
    return -1;
}

void addGrade(Student *s, int grade) {
    if (s->count < MAX_GRADES) {
        s->grades[s->count++] = grade;
    } else {
        printf("Max grades reached.\n");
    }
}

double avgStudent(Student *s) {
    if (s->count == 0) return 0.0;
    int sum = 0;
    for (int i = 0; i < s->count; i++) sum += s->grades[i];
    return (double)sum / s->count;
}

double avgClass(StudentList *list) {
    int total = 0, n = 0;
    for (int i = 0; i < list->size; i++) {
        for (int j = 0; j < list->arr[i].count; j++) {
            total += list->arr[i].grades[j];
            n++;
        }
    }
    return n ? (double)total / n : 0.0;
}

void printStudent(Student *s) {
    printf("%s: ", s->name);
    for (int i = 0; i < s->count; i++) printf("%d ", s->grades[i]);
    printf("(avg: %.2f)\n", avgStudent(s));
}

void listStudents(StudentList *list) {
    if (list->size == 0) { printf("No students.\n"); return; }
    for (int i = 0; i < list->size; i++) printStudent(&list->arr[i]);
}

int menu() {
    printf("\n--- Grades Manager ---\n");
    printf("1) Add student\n");
    printf("2) Add grade to student\n");
    printf("3) Show student by name\n");
    printf("4) List all students\n");
    printf("5) Class average\n");
    printf("0) Quit\n");
    printf("Choice: ");
    int c; if (scanf("%d", &c) != 1) return 0;
    return c;
}

int main() {
    StudentList list; initList(&list);
    int choice; char name[MAX_NAME]; int grade;

    while ((choice = menu()) != 0) {
        switch (choice) {
            case 1:
                printf("Student name: ");
                scanf(" %49[^\n]", name);
                addStudent(&list, name);
                break;
            case 2:
                printf("Student name: ");
                scanf(" %49[^\n]", name);
                {
                    int idx = findStudentIndex(&list, name);
                    if (idx == -1) { printf("Not found.\n"); break; }
                    printf("Grade (0-100): ");
                    if (scanf("%d", &grade) != 1) { printf("Invalid.\n"); break; }
                    addGrade(&list.arr[idx], grade);
                }
                break;
            case 3:
                printf("Student name: ");
                scanf(" %49[^\n]", name);
                {
                    int idx = findStudentIndex(&list, name);
                    if (idx == -1) printf("Not found.\n");
                    else printStudent(&list.arr[idx]);
                }
                break;
            case 4:
                listStudents(&list);
                break;
            case 5:
                printf("Class average: %.2f\n", avgClass(&list));
                break;
            default:
                printf("Invalid.\n");
        }
    }
    free(list.arr);
    return 0;
}
